/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : Uart.H
**     Project   : Dilute_Test
**     Processor : MC9S08DZ60MLC
**     Component : AsynchroSerial
**     Version   : Component 02.472, Driver 01.30, CPU db: 3.00.019
**     Compiler  : CodeWarrior HCS08 C Compiler
**     Date/Time : 2020/6/2, 10:06
**     Abstract  :
**         This bean "AsynchroSerial" implements an asynchronous serial
**         communication. The bean supports different settings of
**         parity, word width, stop-bit and communication speed,
**         user can select interrupt or polling handler.
**         Communication speed can be changed also in runtime.
**         The bean requires one on-chip asynchronous serial channel.
**     Settings  :
**         Serial channel              : SCI1
**
**         Protocol
**             Init baud rate          : 38400baud
**             Width                   : 8 bits
**             Stop bits               : 1
**             Parity                  : none
**             Breaks                  : Disabled
**             Input buffer size       : 100
**             Output buffer size      : 255
**
**         Registers
**             Input buffer            : SCI1D     [$003F]
**             Output buffer           : SCI1D     [$003F]
**             Control register        : SCI1C1    [$003A]
**             Mode register           : SCI1C2    [$003B]
**             Baud setting reg.       : SCI1BD    [$0038]
**             Special register        : SCI1S1    [$003C]
**
**         Input interrupt
**             Vector name             : Vsci1rx
**             Priority                : 
**
**         Output interrupt
**             Vector name             : Vsci1tx
**             Priority                : 
**
**         Used pins:
**         ----------------------------------------------------------
**           Function | On package           |    Name
**         ----------------------------------------------------------
**            Input   |     8                |  PTE1_RxD1
**            Output  |     7                |  PTE0_TxD1
**         ----------------------------------------------------------
**
**
**
**     Contents  :
**         Enable          - byte Uart_Enable(void);
**         RecvChar        - byte Uart_RecvChar(Uart_TComData *Chr);
**         SendChar        - byte Uart_SendChar(Uart_TComData Chr);
**         RecvBlock       - byte Uart_RecvBlock(Uart_TComData *Ptr, word Size, word *Rcv);
**         SendBlock       - byte Uart_SendBlock(Uart_TComData *Ptr, word Size, word *Snd);
**         ClearRxBuf      - byte Uart_ClearRxBuf(void);
**         ClearTxBuf      - byte Uart_ClearTxBuf(void);
**         GetCharsInRxBuf - word Uart_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word Uart_GetCharsInTxBuf(void);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __Uart
#define __Uart

/* MODULE Uart. */

#include "Cpu.h"




#ifndef __BWUserType_Uart_TError
#define __BWUserType_Uart_TError
  typedef union {
    byte err;
    struct {
      bool OverRun  : 1;               /* Overrun error flag */
      bool Framing  : 1;               /* Framing error flag */
      bool Parity   : 1;               /* Parity error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool Noise    : 1;               /* Noise error flag */
      bool Break    : 1;               /* Break detect */
      bool LINSync  : 1;               /* LIN synchronization error */
      bool BitError  : 1;              /* Bit error flag - mismatch to the expected value happened. */
    } errName;
  } Uart_TError;                       /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
#endif

#ifndef __BWUserType_Uart_TComData
#define __BWUserType_Uart_TComData
  typedef byte Uart_TComData ;         /* User type for communication. Size of this type depends on the communication data witdh. */
#endif

#define Uart_INP_BUF_SIZE 0x64         /* Input buffer size */
#define Uart_OUT_BUF_SIZE 0xFF         /* Output buffer size */

extern byte Uart_OutLen;               /* Length of the output buffer content */
extern byte Uart_InpLen;               /* Length of the input buffer content */

byte Uart_Enable(void);
/*
** ===================================================================
**     Method      :  Uart_Enable (component AsynchroSerial)
**
**     Description :
**         Enables the bean - it starts the send and receive
**         functions. Events may be generated
**         ("DisableEvent"/"EnableEvent").
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Uart_RecvChar(Uart_TComData *Chr);
/*
** ===================================================================
**     Method      :  Uart_RecvChar (component AsynchroSerial)
**
**     Description :
**         If any data is received, this method returns one
**         character, otherwise it returns an error code (it does
**         not wait for data). This method is enabled only if the
**         receiver property is enabled.
**         [Note:] Because the preferred method to handle error and
**         break exception in the interrupt mode is to use events
**         <OnError> and <OnBreak> the return value ERR_RXEMPTY has
**         higher priority than other error codes. As a consequence
**         the information about an exception in interrupt mode is
**         returned only if there is a valid character ready to be
**         read.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to a received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_BREAK - Break character is detected
**                           (only when the <Interrupt service>
**                           property is disabled and the <Break
**                           signal> property is enabled)
**                           ERR_COMMON - common error occurred (the
**                           <GetError> method can be used for error
**                           specification)
** ===================================================================
*/

byte Uart_SendChar(Uart_TComData Chr);
/*
** ===================================================================
**     Method      :  Uart_SendChar (component AsynchroSerial)
**
**     Description :
**         Sends one character to the channel. If the bean is
**         temporarily disabled (Disable method) SendChar method
**         only stores data into an output buffer. In case of a zero
**         output buffer size, only one character can be stored.
**         Enabling the bean (Enable method) starts the transmission
**         of the stored data. This method is available only if the
**         transmitter property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte Uart_RecvBlock(Uart_TComData *Ptr,word Size,word *Rcv);
/*
** ===================================================================
**     Method      :  Uart_RecvBlock (component AsynchroSerial)
**
**     Description :
**         If any data is received, this method returns the block of
**         the data and its length (and incidental error), otherwise
**         it returns an error code (it does not wait for data).
**         This method is available only if non-zero length of the
**         input buffer is defined and the receiver property is
**         enabled.
**         If less than requested number of characters is received
**         only the available data is copied from the receive buffer
**         to the user specified destination. The value ERR_EXEMPTY
**         is returned and the value of variable pointed by the Rcv
**         parameter is set to the number of received characters.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of received data
**         Size            - Size of the block
**       * Rcv             - Pointer to real number of the received
**                           data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - The receive buffer didn't
**                           contain the requested number of data.
**                           Only available data has been returned.
**                           ERR_COMMON - common error occurred (the
**                           GetError method can be used for error
**                           specification)
** ===================================================================
*/

byte Uart_SendBlock(Uart_TComData * Ptr,word Size,word *Snd);
/*
** ===================================================================
**     Method      :  Uart_SendBlock (component AsynchroSerial)
**
**     Description :
**         Sends a block of characters to the channel.
**         This method is available only if non-zero length of the
**         output buffer is defined and the transmitter property is
**         enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of data to send
**         Size            - Size of the block
**       * Snd             - Pointer to number of data that are sent
**                           (moved to buffer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - It was not possible to send
**                           requested number of bytes
** ===================================================================
*/

byte Uart_ClearRxBuf(void);
/*
** ===================================================================
**     Method      :  Uart_ClearRxBuf (component AsynchroSerial)
**
**     Description :
**         Clears the receive buffer.
**         This method is available only if non-zero length of the
**         input buffer is defined and the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Uart_ClearTxBuf(void);
/*
** ===================================================================
**     Method      :  Uart_ClearTxBuf (component AsynchroSerial)
**
**     Description :
**         Clears the transmit buffer.
**         This method is available only if non-zero length of the
**         output buffer is defined and the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define Uart_GetCharsInRxBuf() \
((word) Uart_InpLen)                   /* Return number of chars in receive buffer */
/*
** ===================================================================
**     Method      :  Uart_GetCharsInRxBuf (component AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the input buffer.
**         This method is available only if the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

#define Uart_GetCharsInTxBuf() \
((word) Uart_OutLen)                   /* Return number of chars in the transmitter buffer */
/*
** ===================================================================
**     Method      :  Uart_GetCharsInTxBuf (component AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the output buffer.
**         This method is available only if the transmitter property
**         is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

__interrupt void Uart_InterruptRx(void);
/*
** ===================================================================
**     Method      :  Uart_InterruptRx (component AsynchroSerial)
**
**     Description :
**         The method services the receive interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void Uart_InterruptTx(void);
/*
** ===================================================================
**     Method      :  Uart_InterruptTx (component AsynchroSerial)
**
**     Description :
**         The method services the receive interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void Uart_InterruptError(void);
/*
** ===================================================================
**     Method      :  Uart_InterruptError (component AsynchroSerial)
**
**     Description :
**         The method services the error interrupt of the selected 
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


void Uart_Init(void);
/*
** ===================================================================
**     Method      :  Uart_Init (component AsynchroSerial)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END Uart. */

/*
** ###################################################################
**
**     This file was created by Processor Expert 3.07 [04.46]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/

#endif /* ifndef __Uart */
